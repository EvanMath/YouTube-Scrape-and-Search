Index: scraping YouTube categories.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import requests\r\nfrom collections import OrderedDict\r\nimport csv\r\n\r\n\r\nvideoCategories_url = 'https://www.googleapis.com/youtube/v3/videoCategories?'\r\nappLanguages_url = 'https://www.googleapis.com/youtube/v3/i18nLanguages?'\r\nsearch_url = 'https://www.googleapis.com/youtube/v3/search?'\r\nvideo_url = 'https://www.googleapis.com/youtube/v3/videos?'\r\nheaders = ['video_id', 'channel_Id', 'title', 'channel_title', 'tags', 'duration', 'views',\r\n                  'likes', 'dislikes', 'comments', 'favorite']\r\nquotas = 0\r\n\r\n\r\ndef setup(api_path):\r\n    #  Setting up the API key is important cause we are going to use some services of the YouTube.\r\n    #  So go create a YouTube Data API v3 key and write it in the file api_key.txt.\r\n    with open(api_path, 'r') as hfile:\r\n        apikey = hfile.readline().strip()\r\n    # with open(ccode_path, 'r') as hfile:\r\n    #     country_codes = [code.strip() for code in hfile]\r\n    return apikey\r\n\r\n\r\ndef videocat_request(apikey, ccode=\"GR\", language='el'):\r\n    #  This function requests all the possible categories for videos for specific region and language.\r\n    #  Change the parameters ccode and language with them that you are interested in\r\n    url = videoCategories_url + f'part=snippet&hl={language}&regionCode={ccode}&key={apikey}'\r\n    r = requests.get(url)\r\n    c_data = r.json()\r\n    return c_data\r\n\r\n\r\ndef application_language_request(apikey):\r\n    #  This part will return all languages that are applicable with the services we use and their abbreviations\r\n    url = appLanguages_url + f'part=snippet&key={apikey}'\r\n    r = requests.get(url)\r\n    l_data = r.json()\r\n    return l_data\r\n\r\n\r\ndef search_request(apikey, country_code='GR', category=\"\", pagetoken='&'):\r\n    global quotas\r\n    # search snippet cost 100\r\n    quotas += 100\r\n    #  This repository is more like a search based on category app for YouTube and this is the heart of that.\r\n    #  If you don't pass any argument in category parameter then does scrape the YouTube for the specific region code,\r\n    #  Otherwise does search based on the category and the region code.\r\n    if category == \"\":\r\n        url = search_url + f'fields=nextPageToken,items(id(videoId),snippet(channelId,title,channelTitle))&maxResults=50&' \\\r\n                           f'part=snippet{pagetoken}regionCode={country_code}&type=video&key={apikey}'\r\n    else:\r\n        url = search_url + f'fields=nextPageToken,items(id(videoId),snippet(channelId,title,channelTitle))&maxResults=50&' \\\r\n                           f'part=snippet{pagetoken}regionCode={country_code}&type=video&videoCategoryId={category}&key={apikey}'\r\n    r = requests.get(url)\r\n    search_data = r.json()\r\n    return search_data\r\n\r\n\r\ndef video_request(apikey, videoid):\r\n    global quotas\r\n    # videos snippet, content details and statistics cost 7\r\n    quotas += 7\r\n    #  This part gives us the additional features that we might need to use for analysis. Features that we can't take\r\n    #  from the search part.\r\n    url = video_url + f'part=snippet,contentDetails,statistics&id={videoid}'\\\r\n        f'&fields=items(snippet(tags),contentDetails(duration),statistics)&key={apikey}'\r\n    r = requests.get(url)\r\n    video = r.json()\r\n    if 'items' in video.keys():\r\n        return video['items']\r\n    else:\r\n        return []\r\n\r\n\r\ndef get_features(video_list, apikey):\r\n    videos = []\r\n    for item in video_list:\r\n        features = OrderedDict()\r\n        features['video_id'] = item['id'].get('videoId', None)\r\n        features['channel_Id'] = item['snippet'].get('channelId', None)\r\n        features['title'] = item['snippet'].get('title', None)\r\n        features['channel_Title'] = item['snippet'].get('channelTitle', None)\r\n\r\n        video_info = video_request(apikey, features['video_id'])\r\n        if len(video_info) < 1:\r\n            print(f\"No content details in video with ID:{features['video_id']}\")\r\n            continue\r\n        try:\r\n            features['tags'] = video_info[0]['snippet'].get('tags', None)\r\n        except KeyError:\r\n            features['tags'] = None\r\n        try:\r\n            features['duration'] = video_info[0]['contentDetails'].get('duration', None)\r\n        except KeyError:\r\n            features['duration'] = None\r\n        try:\r\n            features['views'] = video_info[0]['statistics'].get('viewCount', None)\r\n            features['likes'] = video_info[0]['statistics'].get('likeCount', None)\r\n            features['dislikes'] = video_info[0]['statistics'].get('dislikeCount', None)\r\n            features['comments'] = video_info[0]['statistics'].get('commentCount', None)\r\n            features['favorite'] = video_info[0]['statistics'].get('favoriteCount', None)\r\n        except KeyError:\r\n            features['views'] = None\r\n            features['likes'] = None\r\n            features['dislikes'] = None\r\n            features['comments'] = None\r\n            features['favorite'] = None\r\n        videos.append(features)\r\n    return videos\r\n\r\n\r\ndef get_languages(apikey):\r\n    lang_data = application_language_request(apikey)\r\n    languages = lang_data['items']\r\n    print(f'Retrieved {len(languages)} languages...')\r\n    with open('YouTube Languages.txt', 'w') as file:\r\n        for i in range(len(languages)):\r\n            file.write(f'{languages[i][\"id\"]}: {languages[i][\"snippet\"][\"name\"]}\\n')\r\n\r\n\r\ndef get_categories(apikey, code='GR'):\r\n    global quotas\r\n    # video categories snippet cost 3\r\n    quotas += 3\r\n    print(f\"Video categories for region code:{code}...\")\r\n    c_data = videocat_request(apikey, code)\r\n    items = c_data['items']\r\n    categories_dict = {}\r\n    for i in range(len(items)):\r\n        key = items[i]['id']\r\n        value = items[i]['snippet']['title']\r\n        categories_dict[key] = value\r\n    with open(f'{code}_YouTube_Cat.csv', 'w') as file:\r\n        for video_id, cat in categories_dict.items():\r\n            file.write(f'{video_id}: {cat}\\n')\r\n\r\n\r\ndef get_pages(apikey,category):\r\n    global quotas\r\n    next_page_token = '&'\r\n    videos_list = []\r\n    while (next_page_token is not None) or (quotas < 6000):\r\n        videos = search_request(apikey, 'GR', category, next_page_token)\r\n        if 'items' in videos.keys():\r\n            features = get_features(videos['items'], apikey)\r\n            with open(f'GR.csv', 'a+', encoding='utf-8', newline='') as file:\r\n                writer = csv.writer(file, delimiter=',', quoting=csv.QUOTE_ALL)\r\n                writer.writerow(headers)\r\n                for feature in features:\r\n                    temp_seq = []\r\n                    for key, value in feature.items():\r\n                        temp_seq.append(value)\r\n                    writer.writerow(temp_seq)\r\n                print(f\"{len(features)} new videos added...\")\r\n        else:\r\n            print(videos)\r\n            break\r\n        videos_list += features\r\n        next_page_token += videos.get('nextPageToken', None)\r\n        print(f\"You have request {quotas} queries\")\r\n    print(f'Videos collected {len(videos_list)}')\r\n    # return videos_list\r\n\r\n\r\nif __name__ == '__main__':\r\n    api_key = setup('api_key.txt')\r\n    get_languages(api_key)\r\n    get_categories(api_key)\r\n    with open(\"GR_YouTube_Cat.csv\", 'r') as file:\r\n        for line in file.readlines():\r\n            print(line.strip())\r\n    pref_category = input('Choose one of the above categories or press \"Enter\" to continue... ')\r\n    get_pages(api_key, pref_category)\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- scraping YouTube categories.py	(revision b3cf048b417061b060ae7addc3db8b5928fc23ab)
+++ scraping YouTube categories.py	(date 1589393444611)
@@ -172,4 +172,3 @@
             print(line.strip())
     pref_category = input('Choose one of the above categories or press "Enter" to continue... ')
     get_pages(api_key, pref_category)
-
